# Process this file with autoconf to produce a configure script.
AC_INIT(src/mmam.cc)

AM_CONFIG_HEADER(src/config.h)

AM_INIT_AUTOMAKE(mmam, 0.15)


# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CPP
AM_PROG_AS
AC_PROG_INSTALL
AC_PROG_RANLIB

# Checks for libraries.
AC_CHECK_LIB([m], [sqrt])
AC_CHECK_LIB([pthread], [pthread_create])

AC_CHECK_HEADER([allegro.h], , AC_MSG_ERROR([Allegro is required to build.]) )
AC_CHECK_HEADER([jpgalleg.h], , AC_MSG_ERROR([JpegAlleg is required to build.]) )
AC_CHECK_HEADER([adime.h], , AC_MSG_ERROR([ADime is required to build.]) )

AC_CHECK_HEADER([alogg/alogg.h], default_ogg="yes", default_ogg="no", [[
#include <allegro.h>
]])
AC_CHECK_HEADER([allegro/dfim.h], default_dfimogg="yes", default_dfimogg="no", [[
#include <allegro.h>
]])

AC_ARG_WITH(alogg,
        [AC_HELP_STRING([--without-alogg],
        [disables linking with alogg, libogg and libvorbis])],
        default_alogg="no")

AC_ARG_WITH(dfimogg,
        [AC_HELP_STRING([--without-dfimogg],
        [disables linking with allegro (dfim mod) to libogg and libvorbis])],
        default_dfimogg="no")



if test "$default_alogg" != no; then
       AC_DEFINE(USE_ALOGG,,
       [Use alogg, libogg and libvorbis for handling compressed sounds])
       OGG_LIBS=""
else
	if test "$default_dfimogg" != no; then
       AC_DEFINE(USE_DFIMOGG,,
       [Use alegro (dfim mod) to handle oggvorbis for handling compressed sounds])
       OGG_LIBS="-ldfim -lvorbis -logg"
	fi
fi


AC_CHECK_HEADER([windows.h],
	WINSOCK="-lwsock32"
	WIN_ICON=mmam.res
	TARGET=MINGW32
	if test "$default_alogg" != no; then
		[ALLEG_LIBS="-lalogg -lalleg -Wl,--subsystem,windows" -lvorbis -lvorbisfile -lvorbisenc -logg]
	else
		[ALLEG_LIBS="-lalleg -Wl,--subsystem,windows"]
	fi	
	
	
	MMAM_DEFINES="-DDATA_DIR=\\\"./\\\""
	SYS_LIBS=-lwinmm,

	TARGET=LINUX
	if test "$default_alogg" != no; then
	    ALLEG_LIBS=`alogg-config --libs`
	else
		ALLEG_LIBS=`allegro-config --libs`
	fi	
	MMAM_DEFINES="-DDATA_DIR=\\\"$datadir/mmam\\\""
	SYS_LIBS=,
)



AC_CHECK_HEADER([fblend.h], default_fblend="yes", default_fblend="no")
AC_ARG_WITH(fblend,
        [AC_HELP_STRING([--without-fblend],
        [disables fblend support])],
        default_fblend="no")

if test "$default_fblend" = yes; then
       AC_DEFINE(USE_FBLEND,,
       [Uses the fblend functions instead of allegro blenders when possable])
       FBLEND_LIB=-lfblend
       AC_SUBST(FBLEND_LIB)
fi


AC_CHECK_HEADER([aldumb.h], default_dumb="yes", default_dumb="no")
AC_ARG_WITH(dumb,
        [AC_HELP_STRING([--without-dumb],
        [disables linking with DUMB for mod playback])],
        default_dumb="no")
AC_ARG_WITH(debug-dumb,
        [AC_HELP_STRING([--with-debug-dumb],
        [links in debug version of DUMB for mod playback] )],
        default_dumb="debug")


if test "$default_dumb" != no; then
       AC_DEFINE(USE_DUMB,,
       [Use DUMB for plaback of MOD music])
       if test "$default_dumb" = debug; then
             DUMB_LIB="-laldmd -ldumbd"
       else
             DUMB_LIB="-laldmb -ldumb"
       fi
       default_midi=no
else
       default_midi=yes
fi
AC_SUBST(DUMB_LIB)


AC_CHECK_HEADER([libnet.h], default_libnet="yes", default_libnet="no")
AC_ARG_WITH(libnet,
        [AC_HELP_STRING([--without-libnet],
        [disables linking with libnet for network play])],
        default_libnet="no")


if test "$default_libnet" != no; then
       AC_DEFINE(USE_NET,,
       [Use libnet for network play])
       LIBNET="-lnet"
fi
AC_SUBST(LIBNET)





AC_CHECK_HEADER([theora/theora.h], default_theora="yes", default_theora="no")
AC_ARG_WITH(theora,
        [AC_HELP_STRING([--without-theora],
        [disables linking with theora for video playback])],
        default_theora="no")


if test "$default_theora" != no; then
       AC_DEFINE(USE_THEORA,,
       [Use theora for plaback of video])
       THEORA_LIB="-ltheora"
fi
AC_SUBST(THEORA_LIB)

AC_CHECK_HEADER([loadpng.h], default_loadpng="yes", default_loadpng="no", [[
#include <allegro.h>
]])
AC_ARG_WITH(png,
        [AC_HELP_STRING([--without-png],
        [disables linking with libloadpng])],
        default_png="no")


if test "$default_loadpng" != no; then
       AC_DEFINE(USE_PNG,,
       [Use loadpng/zlib/libpng instead of bitmaps for compresses sprites])
       PNG_LIBS="-lloadpng -lpng -lz"
fi
AC_SUBST(PNG_LIBS)

AC_SUBST(FONTS_DAT,[[ ]])
AC_SUBST(FONTS_O,[[ ]])

AC_ARG_WITH(fonts,
	[AC_HELP_STRING([--without-fonts],
	[disables linking fonts into executable] )],
	[AC_DEFINE(NO_FONTS,,[disables linking fonts into executable])],
	[AC_SUBST(FONTS_DAT,[fonts.dat])
	AC_SUBST(FONTS_O,[fonts.o])
	if  test -f "./src/fonts.o"  ; then
		echo "fonts.o already exists."
	else
		dat2c -o src/fonts.c -h src/fonts.h -p font -g src/fonts.dat
		gcc -c src/fonts.c -o src/fonts.o -v
	fi
])

AC_ARG_WITH(trans,
        [AC_HELP_STRING([--with-no-trans],
      [disables transparent gui] )],
      [AC_DEFINE(NO_TRANS,,[disables transparent gui])])

AC_ARG_WITH(slow-frame,
        [AC_HELP_STRING([--with-slow-frame],
      [compiles for slow framerate machines] )],
        [AC_DEFINE(SLOW_FRAME,,[low framerate mode])])

AC_ARG_WITH(debug-ai,
        [AC_HELP_STRING([--with-debug-ai],
      [debug info generated by AIs] render)],
        [AC_DEFINE(DEBUG_AI,,[debug info generated by AIs])])


AC_ARG_WITH(debug-draw,
	[AC_HELP_STRING([--with-debug-draw],
	[extra debug info for drawing] )],
        [AC_DEFINE(debug_draw,,[extra debug info for drawing])])


AC_ARG_WITH(efence,
        [AC_HELP_STRING([--with-efence],
      [link with electric fence] )],
        [EFENCE=-lefence
       AC_SUBST(EFENCE)])

#dnl LUAL_BUFFERSIZE lib/lua-4.0.1/include/lauxlib.h
#dnl OLD_ANSI lib/lua-4.0.1/src/gw_lvm.c lib/lua-4.0.1/src/lmem.c lib/lua-4.0.1/src/lvm.c
#dnl LUALIB_API lib/lua-4.0.1/include/lauxlib.h lib/lua-4.0.1/include/lualib.h
#dnl LUA_API lib/lua-4.0.1/include/lua.h
#dnl LUA_COMPAT_ARGRET lib/lua-4.0.1/src/lparser.c

AC_SUBST(MMAM_DEFINES)
AC_SUBST(TARGET)
AC_SUBST(WINSOCK)
AC_SUBST(WIN_ICON)
AC_SUBST(ALLEG_LIBS)
AC_SUBST(SYS_LIBS)
AC_SUBST(OGG_LIBS)



# Checks for header files.
dnl AC_PATH_X
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([errno.h fcntl.h limits.h locale.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/socket.h sys/time.h unistd.h])


# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

# Checks for library functions.
dnl AC_FUNC_FORK
AC_FUNC_MALLOC
dnl AC_FUNC_STAT
dnl AC_FUNC_STRCOLL
dnl AC_FUNC_STRFTIME
AC_CHECK_FUNCS([floor getcwd gettimeofday memchr memmove memset pow sqrt strchr strcspn strerror strpbrk strspn strstr strtol strtoul])

#automake sugg
dnl AC_CHECK_TOOL([STRIP],[strip])

AC_OUTPUT([Makefile
	src/Makefile])

